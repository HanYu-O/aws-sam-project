import { NestFactory } from '@nestjs/core';
import { ExpressAdapter } from '@nestjs/platform-express';
import serverlessExpress from '@vendia/serverless-express';
import { Handler, Context, APIGatewayProxyEvent } from 'aws-lambda';
import express from 'express';
import { AppModule } from './app.module';
import { PrismaService } from './prisma/prisma.service';

let cachedServer: Handler;
let nestApp: any;

async function bootstrap(): Promise<Handler> {
  if (!cachedServer) {
    console.log('Cold start - initializing NestJS application...');
    const startTime = Date.now();

    try {
      const expressApp = express();

      // ÂàõÂª∫NestJSÂ∫îÁî®
      nestApp = await NestFactory.create(
        AppModule,
        new ExpressAdapter(expressApp),
        {
          logger: process.env.NODE_ENV === 'development' ? ['log', 'error', 'warn'] : ['error'],
        },
      );

      // ÂêØÁî® CORS
      nestApp.enableCors({
        origin: true,
        credentials: true,
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
      });

      // ËÆæÁΩÆÂÖ®Â±ÄÂâçÁºÄÔºàÂèØÈÄâÔºâ
      // nestApp.setGlobalPrefix('api');

      // ÂàùÂßãÂåñÂ∫îÁî®
      await nestApp.init();

      // È¢ÑÁÉ≠Êï∞ÊçÆÂ∫ìËøûÊé•
      try {
        const prismaService = nestApp.get(PrismaService);
        await prismaService.warmUp();
        console.log('Database connection pre-warmed');
      } catch (error) {
        console.error('Database warm-up failed during bootstrap:', error);
      }

      // ÂàõÂª∫serverless handler
      cachedServer = serverlessExpress({
        app: expressApp as any,
        respondWithErrors: true,
      });

      const endTime = Date.now();
      console.log(`Cold start completed in ${endTime - startTime}ms`);
    } catch (error) {
      console.error('Error during bootstrap:', error);
      throw error;
    }
  }

  return cachedServer;
}

export const handler: Handler = async (
  event: APIGatewayProxyEvent,
  context: Context,
  callback?: any,
) => {
  // Lambda‰ºòÂåñÔºöËÆæÁΩÆcallbackWaitsForEmptyEventLoop‰∏∫false
  // ËøôÂÖÅËÆ∏LambdaÂú®ÂìçÂ∫îÂêéÁ´ãÂç≥ËøîÂõûÔºåËÄå‰∏çÁ≠âÂæÖ‰∫ã‰ª∂Âæ™ÁéØÊ∏ÖÁ©∫
  context.callbackWaitsForEmptyEventLoop = false;

  try {
    // ËÆ∞ÂΩïËØ∑Ê±Ç‰ø°ÊÅØ
    console.log('Lambda invocation:', {
      requestId: context.awsRequestId,
      path: event.path,
      method: event.httpMethod,
      remainingTime: context.getRemainingTimeInMillis(),
    });

    // Ê£ÄÊü•ÊòØÂê¶‰∏∫warmupËØ∑Ê±Ç (CloudWatch Events)
    if (event.headers && event.headers['User-Agent'] === 'Amazon CloudWatch Events Rule') {
      console.log('Warmup request received');
      return {
        statusCode: 200,
        body: JSON.stringify({ message: 'Warmup successful' }),
      };
    }

    // üîß Áªü‰∏ÄÁ°Æ‰øùNestJSÂ∫îÁî®Â∑≤ÂàùÂßãÂåñÔºàÂØπÊâÄÊúâËØ∑Ê±ÇÈÉΩÈÄÇÁî®Ôºâ
    if (!nestApp) {
      await bootstrap();
    }

    // Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÁ´ØÁÇπ
    if (event.path === '/init-db' && event.httpMethod === 'POST') {
      try {
        if (nestApp) {
          const prismaService = nestApp.get(PrismaService);
          console.log('Starting database initialization...');

          // ÁÆÄÂåñÊñπÊ°àÔºö‰ΩøÁî®PrismaÂÜÖÁΩÆÊñπÊ≥ïÈ™åËØÅËøûÊé•Âπ∂ÂàõÂª∫Ë°®
          try {
            // È™åËØÅÊï∞ÊçÆÂ∫ìËøûÊé•
            await prismaService.$queryRaw`SELECT 1 as test`;
            console.log('Database connection verified');

            // ‰ΩøÁî®PrismaÁöÑËøÅÁßªËØ≠Âè•ÔºàÊ†πÊçÆschema.prismaÁîüÊàêÔºâ
            await prismaService.$executeRaw`
              CREATE TABLE IF NOT EXISTS "posts" (
                "id" TEXT NOT NULL,
                "title" TEXT NOT NULL,
                "slug" TEXT NOT NULL UNIQUE,
                "content" TEXT,
                "excerpt" TEXT,
                "published" BOOLEAN DEFAULT true,
                "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "author" TEXT,
                "tags" TEXT[] DEFAULT '{}',
                PRIMARY KEY ("id")
              );
            `;
          } catch (dbError) {
            console.error('Database operation failed:', dbError);
            throw new Error(`Database initialization failed: ${dbError.message}`);
          }

          console.log('Database initialization completed');

          return {
            statusCode: 200,
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              status: 'success',
              message: 'Database initialized successfully',
              tables: ['posts', 'transactions'],
              timestamp: new Date().toISOString(),
              requestId: context.awsRequestId,
            }),
          };
        }

        throw new Error('NestJS app not initialized');
      } catch (error) {
        console.error('Database initialization failed:', error);
        return {
          statusCode: 500,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'error',
            error: error.message,
            timestamp: new Date().toISOString(),
            requestId: context.awsRequestId,
          }),
        };
      }
    }

    // ÁßçÂ≠êÊï∞ÊçÆÁ´ØÁÇπ
    if (event.path === '/seed' && event.httpMethod === 'POST') {
      try {
        if (nestApp) {
          const prismaService = nestApp.get(PrismaService);
          console.log('Starting seed data insertion...');

          // ÂàõÂª∫ÂçöÂÆ¢ÊñáÁ´†Ôºà‰ΩøÁî®seed.ts‰∏≠ÁöÑÊï∞ÊçÆÔºâ
          const posts = await Promise.all([
            prismaService.post.upsert({
              where: { slug: 'nextjs-routing' },
              update: {},
              create: {
                title: 'Next.js Ë∑ØÁî±Á≥ªÁªüÂ≠¶‰π†',
                slug: 'nextjs-routing',
                excerpt: 'Â≠¶‰π† Next.js App Router ÁöÑÂü∫Á°ÄÊ¶ÇÂøµÂíåÊñá‰ª∂Á≥ªÁªüË∑ØÁî±',
                content: `# Next.js Ë∑ØÁî±Á≥ªÁªü

Next.js 13+ ÁöÑ App Router ‰ΩøÁî®Êñá‰ª∂Á≥ªÁªüË∑ØÁî±ÔºåËøôÊÑèÂë≥ÁùÄÔºö

## Êñá‰ª∂Á≥ªÁªüË∑ØÁî±
- \`page.tsx\` Êñá‰ª∂ÂÆö‰πâ‰∏Ä‰∏™Ë∑ØÁî±
- Êñá‰ª∂Â§πÂêçÁß∞ÂÜ≥ÂÆö URL Ë∑ØÂæÑ
- \`[slug]\` Ë°®Á§∫Âä®ÊÄÅË∑ØÁî±ÂèÇÊï∞

## Âü∫Á°ÄË∑ØÁî±Á§∫‰æã
- \`app/page.tsx\` ‚Üí \`/\`
- \`app/blog/page.tsx\` ‚Üí \`/blog\`
- \`app/blog/[slug]/page.tsx\` ‚Üí \`/blog/‰ªªÊÑèË∑ØÂæÑ\`

ËøôÊòØ Next.js Âº∫Â§ßËÄåÁõ¥ËßÇÁöÑË∑ØÁî±Á≥ªÁªüÔºÅ`,
                published: true,
                createdAt: new Date('2024-01-15'),
                author: 'Âº†‰∏â',
                tags: ['Next.js', 'React', 'Ë∑ØÁî±'],
              },
            }),
            prismaService.post.upsert({
              where: { slug: 'react-components' },
              update: {},
              create: {
                title: 'React ÁªÑ‰ª∂ËÆæËÆ°ÂéüÂàô',
                slug: 'react-components',
                excerpt: '‰∫ÜËß£Â¶Ç‰ΩïËÆæËÆ°ÂèØÂ§çÁî®ÂíåÂèØÁª¥Êä§ÁöÑ React ÁªÑ‰ª∂',
                content: `# React ÁªÑ‰ª∂ËÆæËÆ°ÂéüÂàô

ÁºñÂÜôÂèØÁª¥Êä§ÁöÑ React ÁªÑ‰ª∂ÁöÑÂá†‰∏™ÈáçË¶ÅÂéüÂàôÔºö

## 1. Âçï‰∏ÄËÅåË¥£ÂéüÂàô
ÊØè‰∏™ÁªÑ‰ª∂Â∫îËØ•Âè™Ë¥üË¥£‰∏Ä‰∏™ÂäüËÉΩ„ÄÇ

## 2. ÂèØÂ§çÁî®ÊÄß
ÈÄöËøá props ËÆ©ÁªÑ‰ª∂ÂèòÂæóÁÅµÊ¥ªÂèØÂ§çÁî®„ÄÇ

## 3. ÁªÑÂêà‰ºò‰∫éÁªßÊâø
‰ΩøÁî®ÁªÑÂêàÊ®°ÂºèÊù•ÊûÑÂª∫Â§çÊùÇÁªÑ‰ª∂„ÄÇ

## 4. Props Êé•Âè£ËÆæËÆ°
ÊòéÁ°ÆÂÆö‰πâÁªÑ‰ª∂ÁöÑËæìÂÖ•ÂíåËæìÂá∫„ÄÇ`,
                published: true,
                createdAt: new Date('2024-01-10'),
                author: 'ÊùéÂõõ',
                tags: ['React', 'ÁªÑ‰ª∂', 'ËÆæËÆ°Ê®°Âºè'],
              },
            }),
            prismaService.post.upsert({
              where: { slug: 'typescript-basics' },
              update: {},
              create: {
                title: 'TypeScript Âü∫Á°ÄÂÖ•Èó®',
                slug: 'typescript-basics',
                excerpt: '‰ªéÈõ∂ÂºÄÂßãÂ≠¶‰π† TypeScript ÁöÑÁ±ªÂûãÁ≥ªÁªü',
                content: `# TypeScript Âü∫Á°Ä

TypeScript ‰∏∫ JavaScript Ê∑ªÂä†‰∫ÜÁ±ªÂûãÁ≥ªÁªüÔºö

## Âü∫Á°ÄÁ±ªÂûã
- string, number, boolean
- Array, Object
- interface, type

## È´òÁ∫ßÁâπÊÄß
- Ê≥õÂûã (Generics)
- ËÅîÂêàÁ±ªÂûã (Union Types)
- Á±ªÂûãÂÆàÂç´ (Type Guards)

## ‰ºòÂäø
- ÁºñËØëÊó∂ÈîôËØØÊ£ÄÊü•
- Êõ¥Â•ΩÁöÑÂºÄÂèë‰ΩìÈ™å
- ‰ª£Á†ÅÊõ¥ÊòìÁª¥Êä§`,
                published: true,
                createdAt: new Date('2024-01-05'),
                author: 'Áéã‰∫î',
                tags: ['TypeScript', 'JavaScript', 'Á±ªÂûãÁ≥ªÁªü'],
              },
            }),
          ]);

          console.log('Seed data insertion completed');

          return {
            statusCode: 200,
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              status: 'success',
              message: 'Seed data inserted successfully',
              posts: posts.map(p => ({ id: p.id, title: p.title, slug: p.slug })),
              count: posts.length,
              timestamp: new Date().toISOString(),
              requestId: context.awsRequestId,
            }),
          };
        }

        throw new Error('NestJS app not initialized');
      } catch (error) {
        console.error('Seed data insertion failed:', error);
        return {
          statusCode: 500,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'error',
            error: error.message,
            timestamp: new Date().toISOString(),
            requestId: context.awsRequestId,
          }),
        };
      }
    }

    // ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ
    if (event.path === '/health' && event.httpMethod === 'GET') {
      try {
        let dbStatus = 'unknown';
        if (nestApp) {
          const prismaService = nestApp.get(PrismaService);
          const isHealthy = await prismaService.healthCheck();
          dbStatus = isHealthy ? 'healthy' : 'unhealthy';
        }

        return {
          statusCode: 200,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'healthy',
            database: dbStatus,
            timestamp: new Date().toISOString(),
            requestId: context.awsRequestId,
          }),
        };
      } catch (error) {
        console.error('Health check failed:', error);
        return {
          statusCode: 503,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'unhealthy',
            error: error.message,
            timestamp: new Date().toISOString(),
            requestId: context.awsRequestId,
          }),
        };
      }
    }

    // Ëé∑ÂèñÂπ∂ÊâßË°å‰∏ªÂ§ÑÁêÜÂô®ÔºàÂ∑≤Âú®È°∂ÈÉ®ÂàùÂßãÂåñÔºâ
    return cachedServer(event, context, callback);

  } catch (error) {
    console.error('Lambda handler error:', error);

    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong',
        requestId: context.awsRequestId,
      }),
    };
  }
};